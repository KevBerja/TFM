services:

  keycloak:
    image: quay.io/keycloak/keycloak:19.0.3
    container_name: keycloak
    hostname: keycloak
    user: root
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL_HOST: keycloak-db
      KC_DB_URL_PORT: 5432
      KC_DB_URL_DATABASE: keycloak
      KC_DB_USERNAME: kcv239
      KC_DB_PASSWORD: inlumine.ual.es
    ports:
      - "8080:8080"
      - "8443:8443"
    networks:
      - tfm-net
    volumes:
      - ./keycloak/volume/data:/opt/keycloak/data
      - ./keycloak/realm/config:/opt/keycloak/data/import
      - ./keycloak/init-keycloak.sh:/keycloak/init-scripts/init-keycloak.sh
      - ./keycloak/volume/providers:/opt/keycloak/providers
    entrypoint: ["/bin/sh", "/keycloak/init-scripts/init-keycloak.sh"]
    depends_on:
      - keycloak-db
    restart: on-failure

  keycloak-db:
    image: postgres:13
    container_name: keycloak-db
    hostname: keycloak-db
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: kcv239
      POSTGRES_PASSWORD: inlumine.ual.es
    volumes:
      - ./db/volume/postgresql/data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - tfm-net
    restart: on-failure
  
  vault:
    image: vault:1.13.1
    container_name: vault
    hostname: vault
    ports:
      - "8200:8200"
    volumes:
      - ./vault/config:/vault/config
      - ./vault/volume/data:/vault/data
      - ./vault/volume/logs:/vault/logs
    command: ["sh", "-c", "vault server -config=/vault/config/config.hcl"]
    cap_add:
      - IPC_LOCK
    networks:
      - tfm-net
    restart: on-failure

  vault-init:
    image: vault:1.13.1
    container_name: vault-init
    depends_on:
      - vault
    volumes:
      - ./vault/init-vault.sh:/init-vault.sh
      - ./vault/volume/data:/vault/data
    networks:
      - tfm-net
    entrypoint: ["sh", "-c", "apk add --no-cache curl jq && sh /init-vault.sh"]
    restart: on-failure

  app-home:
    container_name: app-home
    hostname: app-home
    build:
      context: ./app-home
      dockerfile: Dockerfile    
    ports:
      - "8088:80"
    networks:
      - tfm-net
    restart: on-failure

  phpmyadmin:
    container_name: phpmyadmin
    hostname: phpmyadmin
    build:
      context: ./db/phpmyadmin
      dockerfile: Dockerfile
    ports:
      - "8880:80"
    networks:
      - tfm-net
    volumes:
      - ./db/volume/phpmyadmin:/etc/phpmyadmin
    restart: on-failure

  mysql:
    container_name: mysql
    hostname: mysql
    build:
      context: ./db/mysql
      dockerfile: Dockerfile
    ports:
      - "3366:3306"
    volumes:
      - ./db/volume/mysql:/var/lib/mysql
      - ./db/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - tfm-net
    restart: on-failure
  
  linear-regression:
    container_name: linear-regression
    hostname: linear-regression
    build:
      context: ./linear-regression
      dockerfile: Dockerfile    
    ports:
      - "5000:5000"
    networks:
      - tfm-net
    restart: on-failure

  logistic-regression:
    container_name: logistic-regression
    hostname: logistic-regression
    build:
      context: ./logistic-regression
      dockerfile: Dockerfile    
    ports:
      - "5001:5001"
    networks:
      - tfm-net
    restart: on-failure

  random-forest:
    container_name: random-forest
    hostname: random-forest
    build:
      context: ./random-forest
      dockerfile: Dockerfile    
    ports:
      - "5002:5002"
    networks:
      - tfm-net
    restart: on-failure

networks:
  tfm-net:
    driver: bridge